sim_sarima0112 <- forecast(sarima01012, h = 29)
rmse_sarima0112 <- rmse(test_ftp, sim_sarima0112$mean)
plot(sim_sarima0112)
lines(ftp_2y_ts, col = "black")
acf(diff(ftp_2y, lag = 4), lag = 24)
pacf(diff(ftp_2y, lag = 4), lag = 24)
acf(sarima01012$residuals)
plot(sarima01012$residuals)
#---- auto ARMA model
auto_arma_model <- auto.arima(train_ftp_ts)
sim_arma_auto <- forecast(auto_arma_model, h = 29)
plot(sim_arma_auto, main = "Forecasts from Random Walk")
lines(ftp_2y_ts, col = "black")
lines(auto_arma_model$fitted, col = "cornflowerblue", lty = 2, lwd = 1.2)
legend("bottomleft", legend = c("fitted value","actual value", "predicted value"), col = c("cornflowerblue","black", "cyan2"), lty = c(2 , 1, 1), lwd = c(1, 1, 2))
rmse_arma_auto <- rmse(test_ftp, sim_arma_auto$mean)
library("olsrr")
ols_test_breusch_pagan(vasi) ## test result shows that the residuals of lm model has heteroskedasticity --> vasicek hand wavy ish (?)
library("readxl")
library(tseries)
library(Metrics)
library(sandwich)
data <- read_xlsx("hypothetical_data_set.xlsx", skip = 1)
FTP <- as.data.frame(data[, 2 : 6])
DFTP <- as.data.frame(data[ , 1 ])
ER <- as.data.frame(data[ , 9 : 13])
DER <- as.data.frame(data[ , 8])
ftp_2y <- FTP[ , 1]
#--functions writing here-----
vasi_ml <- function()
#--------------
#overall data visualization <- still need to fix the x-axis to time
plot(DFTP, FTP[,1], type = "l")
plot(FTP[, 1], type = "l")
plot(FTP[, 1], ylim = c(-0.007, 0.012), type = "l")
for(i in 2 : 5){
lines(FTP[, i])
}
hist(ftp_2y)
plot(density(ftp_2y))
#sp_FTP shows that we only need to model one maturity
sp_FTP<- cbind(FTP[ , 2]-FTP[ , 1], 0.5 * (FTP[ , 3] - FTP[ , 2]), 0.5 * (FTP[ , 4] - FTP[ , 3]), (FTP[ , 5] - FTP[ , 4]) / 3)
#visualization of the density and show the two peaks
d <- density(FTP[ , 1])
plot(d)
abline(v =modes(d)$x)
#modes(d)$x is the peak value of FTP_2y maturity
cor(FTP[ , 1], ER[ , 1:3])
print(modes(d)$x)
plot(DFTP, FTP[, 1], type = "l")
abline(h = modes(d)$x , col = "blue", lwd  = 2)
abline(h = mean(FTP[ , 1]), col = "pink", lwd = 2)
sd(FTP[ , 1])
plot( abs(diff(ftp_2y)), type = "l")
plot(diff(ftp_2y), type = "l")
library(ggpubr)
ggqqplot(diff(ftp_2y))
dif_2y <- diff(ftp_2y)
shapiro.test(diff(ftp_2y))
shapiro.test(ftp_2y)## ftp is not normal
kpss.test(ftp_2y)#non-stationary
adf.test(ftp_2y)#non-stationary
kpss.test(dif_2y)#
adf.test(dif_2y)#this is contradict --> heteroskedasticity
library(vrtest)
vrtest::Auto.Q(ftp_2y)
plot(seq(-0.002, 0.002, by = 0.0001), dnorm(seq(from = -0.002, to =  0.002, by = 0.0001), mean = mean(dif_2y), sd = sd(dif_2y)), type = "l")
lines(density(dif_2y), col = "red")
mean(dif_2y)
cancel_ftp <- rep(0, (length(ftp_2y) - 5))
for(i in 1 : (length(ftp_2y) - 5)){
cancel_ftp[i] <- mean(ftp_2y[ (1+i) : 120 ] - ftp_2y[1 : (120 - i)])
}
cancel_ftp
plot(c(1 : (length(ftp_2y) - 5)), cancel_ftp, type = "l", ylim = c(-0.02, 0.02))
lines(c(1 : (length(ftp_2y) -5)) * mean(dif_2y), col = "blue")
lines(c(1 : (length(ftp_2y) - 5)) * mean(dif_2y) + 2 *sd(dif_2y) * length(ftp_2y) / 12, col = "red")
rmse(cancel_ftp, c(1 : (length(ftp_2y) -5)) * mean(dif_2y) )
lm(cancel_ftp ~ c(1 : (length(ftp_2y) - 5)))
mean(dif_2y)
cancel_ftp
par(mfrow = c(1, 2))
acf(ftp_2y)
pacf(ftp_2y)
#------ with consideration of interest rate leave it later can be ignored now
FTP_i <- cbind((FTP[, 1] - 0.001), FTP[ , 2:3], FTP[ , 5])
ER_i <- ER[ , 2:5]
plot(ftp_2y , type = "l" , ylim = c(-0.01 , 0.02))
lines(ER[ , 1], col = "blue")
plot(diff(ftp_2y), type = "l" , ylim = c(-0.01 , 0.01))
lines(diff(ER[ , 1]) , col = "blue")
pp <- lm(diff(ftp_2y)~diff(ER [ , 1]))
pp
plot(diff(ftp_2y), type = "l")
#------ use for autocorrelation it need to be garch later on, it shows high autocorrelation
lines(diff(ER[ , 1]), col = "red")
kk <- lm(ftp_2y~ ER[ , 1])
library("aTSA")
adf.test(diff(ftp_2y))
library(tseries)
print(acf(ftp_2y^2))
#------- trying to do normal draws from dif_ftp to predict
plot(density(diff(ftp_2y)))
library(mixR)
mix_norm1 <- mixfit(dif_2y, ncomp= 1, family = "norm")
plot(mix_norm1)
xxx<- dif_2y[2:length(dif_2y)] # xt
xx <- dif_2y[1:(length(dif_2y)-1)] #xt-11
length(xxx)
y <- lm(xxx~xx)
summary(y)
plot(pacf(dif_2y))
plot(acf(dif_2y))
plot(dif_2y, type = "l")
abline(h = mean(dif_2y))
x <- lm(dif_2y~diff(ER[,1]))
plot(acf(dif_2y^2))
Box.test(dif_2y, lag = 12, type = "Ljung-Box")
Box.test(dif_2y^2, lag = 12, type = "Ljung-Box")
##Ljung-box shows that it should be iid as it is not significant
train_dif <-  dif_2y[1 : 90]
train <- length(train_dif)
test_dif <- dif_2y[91 : length(dif_2y)]
train_ftp <- ftp_2y[1 : (train + 1)]
test_ftp <- ftp_2y[(train+2) : length(ftp_2y)]
test <- length(test_ftp)
mix_norm1_<- mixfit(train_dif, ncomp = 1, family = "normal")
Box.test(train_dif, lag = 12, type = "Ljung-Box")
n_sim <- 10000
##Ljung-box shows that in the training data it is still iid
#----- normal draws from the distribution of training and back-testing
norm_predict <- matrix(0 , n_sim , test)
for (i in 1 : n_sim){
norm_predict[i, 1] <-  rnorm(1, mix_norm1_$mu, sd = mix_norm1_$sd )
for(j in 2 : test){
norm_predict[i , j] <- rnorm(1, mix_norm1_$mu, sd = mix_norm1_$sd )
}
}
norm_predict <- colMeans(norm_predict)
predict_norm_ftp <- rep (0, test)
predict_norm_ftp[1] <- train_ftp[length(train_ftp)] + norm_predict[1]
for(i in 2 : test){
predict_norm_ftp[i] <- predict_norm_ftp[(i -1)] + norm_predict[i]
}
rmse_normal_draw_ftp <- rmse(test_ftp, predict_norm_ftp)
rmse_normal_dif <- rmse(test_dif, norm_predict)
plot(norm_predict)
points(test_dif, col = "blue")
mean(train_dif)
##-----AR(1) model
library(lmtest)
AR1 <- lm(train_ftp[2 : length(train_ftp)] ~ train_ftp[1 : (length(train_ftp) - 1)])
AR_mean_res <- mean(AR1$residuals)
AR_sd_res <- sd(AR1$residuals)
plot(AR1$residuals)
summary(AR1)
bptest(AR1)
ar1 <- rep(0, test)
ar1[1] <- train_ftp[length(train_ftp)] * AR1$coefficients[2] + AR1$coefficients[1]
for(i in 2: test){
ar1[i] <- ar1[(i-1)] * AR1$coefficients[2] + AR1$coefficients[1]
}
plot(test_ftp, type = "l")
plot(ar1)
lines(ar1)
summary(AR1)
rmse_ar1 <- rmse(test_ftp, ar1)
pacf(dif_2y, lag = 36)
acf(dif_2y, lag = 36)
##-------random walk
rw <- rep(ftp_2y[train + 1], test)
plot(test_ftp, type = "l")
lines( rw, col = "blue")
rmse_rw <- rmse(test_ftp, rw)
rmse_normal <- rmse(test_dif, norm_predict)
plot(norm_predict, type = "l")
plot(test_dif, type = "l") ## this is very bad
pacf(dif_2y)
acf(dif_2y)
#----ARMA(1, 1)
library(forecast)
train_ftp_ts <- ts(train_ftp, start = c(2012, 1), frequency = 12)
ftp_2y_ts <- ts(ftp_2y,start = c(2012, 1), frequency = 12 )
arma11 <- Arima(train_ftp_ts, order = c(1, 0, 1), method = "CSS", include.constant = T)
sim_ar11 <- forecast(arma11, h = 29)
plot(test_ftp)
plot(sim_ar11)
lines(ftp_2y_ts, col = "black")
lines(sim_ar11$fitted, col = "cornflowerblue", lty = 2, lwd = 1.2)
legend("bottomleft", legend = c("fitted value","actual value", "predicted value"), col = c("cornflowerblue","black", "cyan2"), lty = c(2 , 1, 1), lwd = c(1, 1, 2))
plot(sim_ar11$residuals)
plot(predict(sim_ar11))
rmse_arma11 <- rmse(test_ftp, sim_ar11$mean)
rmse_arma11
#----ARIMA(1,1,1)
library(forecast)
arima111 <- Arima(train_ftp_ts, order = c(1, 1, 1), include.mean = T, method = "CSS")
sim_arima111 <- forecast(arima111, h = 29)
plot(sim_arima111)
lines(ftp_2y_ts, col = "blue")
plot(sim_ar11$residuals)
rmse_arima111 <- rmse(test_ftp, sim_arima111$mean)
acf(arima111$residuals)
#AR1 package
ar1p <- Arima(train_ftp_ts, order = c( 1, 0, 0), method = "CSS",  include.constant =T )
ar1p$coef
sim_ar1p <- forecast(ar1p, h = 29)
plot(sim_ar1p)
rmse_ar1p <- rmse(test_ftp, sim_ar1p$mean)
#--- ARIMA( 0 ,1 , 1)
arima011 <- Arima(train_ftp_ts, order = c(0, 1, 1), include.mean = T, method = "CSS")
sim_arima011 <- forecast(arima011, h = 29)
rmse_arima011 <- rmse(test_ftp, sim_arima011$mean)
plot(sim_arima011)
lines(ftp_2y_ts, col = "black")
lines(arima011$fitted, col = "cornflowerblue", lty = 2, lwd = 1.2)
acf(arima011$residuals, lag.max = 48)
pacf(arima011$residuals, lag.max = 48)
#--- ARIMA( 12 ,1 , 0)
arima1210 <- Arima(train_ftp_ts, order = c(12, 1, 0), include.mean = T, method = "CSS")
sim_arima1210 <- forecast(arima1210, h = 29)
rmse_arima1210 <- rmse(test_ftp, sim_arima1210$mean)
plot(sim_arima1210)
lines(ftp_2y_ts, col = "black")
lines(arima1210$fitted, col = "cornflowerblue", lty = 2, lwd = 1.2)
legend("bottomleft", legend = c("fitted value","actual value", "predicted value"), col = c("cornflowerblue","black", "cyan2"), lty = c(2 , 1, 1), lwd = c(1, 1, 2))
#--- ARIMA( 0 ,1 , 12)
arima0112 <- Arima(train_ftp_ts, order = c(0, 1, 12), include.mean = T, method = "CSS")
sim_arima0112 <- forecast(arima0112, h = 29)
rmse_arima0112 <- rmse(test_ftp, sim_arima0112$mean)
plot(sim_arima1210)
lines(ftp_2y_ts, col = "black")
lines(arima1210$fitted, col = "cornflowerblue", lty = 2, lwd = 1.2)
legend("bottomleft", legend = c("fitted value","actual value", "predicted value"), col = c("cornflowerblue","black", "cyan2"), lty = c(2 , 1, 1), lwd = c(1, 1, 2))
#--- SARIMA()
sarima01012 <- arima(train_ftp_ts, order = c(1, 0, 0), seasonal = c(0,0,1,4), method = "ML")
sim_sarima0112 <- forecast(sarima01012, h = 29)
rmse_sarima0112 <- rmse(test_ftp, sim_sarima0112$mean)
plot(sim_sarima0112)
lines(ftp_2y_ts, col = "black")
acf(diff(ftp_2y, lag = 4), lag = 24)
pacf(diff(ftp_2y, lag = 4), lag = 24)
acf(sarima01012$residuals)
plot(sarima01012$residuals)
#---- auto ARMA model
auto_arma_model <- auto.arima(train_ftp_ts)
sim_arma_auto <- forecast(auto_arma_model, h = 29)
plot(sim_arma_auto, main = "Forecasts from Random Walk")
lines(ftp_2y_ts, col = "black")
lines(auto_arma_model$fitted, col = "cornflowerblue", lty = 2, lwd = 1.2)
legend("bottomleft", legend = c("fitted value","actual value", "predicted value"), col = c("cornflowerblue","black", "cyan2"), lty = c(2 , 1, 1), lwd = c(1, 1, 2))
rmse_arma_auto <- rmse(test_ftp, sim_arma_auto$mean)
library("olsrr")
#ols_test_breusch_pagan(vasi) ## test result shows that the residuals of lm model has heteroskedasticity --> vasicek hand wavy ish (?)
#------ ARCH test on diff _ftp to check whether GARCH can be applied
library("FinTS")
ArchTest(dif_2y) ## you cannot model it via Garch
ArchTest(ftp_2y)
#----vasicek paper using MLE method by Axel Gerebenk
n <- (length(ftp_2y) - test )
a_vasi <- -12 * log ((n * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/(n * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / (n * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / (n * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
expected_forecast <- rep(0 , test)
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
plot(ftp_2y[(train + 2): length(ftp_2y)], type = "l")
plot(expected_forecast)
rmse_vasi_paper <- rmse(ftp_2y[(train + 2) : length(ftp_2y)], expected_forecast)
#---- normal muxture of ftp directly
mix_norm1_ftp <- mixfit(ftp_2y, ncomp= 1, family = "norm")
mix_norm2_ftp <- mixfit(ftp_2y, ncomp= 2, family = "norm")
mix_norm3_ftp <- mixfit(ftp_2y, ncomp= 3, family = "norm")
mix_norm4_ftp <- mixfit(ftp_2y, ncomp= 4, family = "norm")
mix_norm1_ftp$aic
mix_norm2_ftp$aic
mix_norm3_ftp$aic
mix_norm4_ftp$aic
plot(mix_norm3_ftp)
par(mfrow = c(2 , 1))
acf(dif_2y)
pacf(dif_2y)
#----GARCH directly to FTP
# Assuming 'returns' is your financial return time series
library(rugarch)
spec <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)))
fit <- ugarchfit(spec, data = train_ftp_ts)
sim_GARCH <- ugarchforecast(fit, n.ahead = 29)
#fitted(sim_GARCH)[1 : 29]
rmse_GARCH <- rmse(test_ftp, fitted(sim_GARCH))
plot(sim_GARCH)
n <- (length(ftp_2y) - test )
a_vasi <- -12 * log (((n - 1) * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/((n) - 1 * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / ((n - 1) * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / ((n - 1) * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
expected_forecast <- rep(0 , test)
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
plot(ftp_2y[(train + 2): length(ftp_2y)], type = "l")
plot(expected_forecast)
rmse_vasi_paper <- rmse(ftp_2y[(train + 2) : length(ftp_2y)], expected_forecast)
#---- normal muxture of ftp directly
n <- (length(ftp_2y) - test )
a_vasi <- -12 * log ((n * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/(n * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / (n * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / (n * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
expected_forecast <- rep(0 , test)
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
plot(ftp_2y[(train + 2): length(ftp_2y)], type = "l")
plot(expected_forecast)
rmse_vasi_paper <- rmse(ftp_2y[(train + 2) : length(ftp_2y)], expected_forecast)
n <- (length(ftp_2y) - test )
a_vasi <- -12 * log (((n - 1) * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/((n - 1) * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / (n * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / ((n - 1) * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
expected_forecast <- rep(0 , test)
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
plot(ftp_2y[(train + 2): length(ftp_2y)], type = "l")
plot(expected_forecast)
rmse_vasi_paper <- rmse(ftp_2y[(train + 2) : length(ftp_2y)], expected_forecast)
n <- (length(ftp_2y) - test )
a_vasi <- -12 * log (((n - 1) * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/((n - 1) * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / (n * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / ((n - 1) * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
expected_forecast <- rep(0 , test)
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
plot(ftp_2y[(train + 2): length(ftp_2y)], type = "l")
plot(expected_forecast)
rmse_vasi_paper <- rmse(ftp_2y[(train + 2) : length(ftp_2y)], expected_forecast)
#--functions writing here-----
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(-a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
vasi_forecast (par, n){
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1` - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1` - exp(-a / 12))
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1` - exp(-a / 12))
}
return(sim)
}
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
coef(sarima01012)
sarima01012$coef
sarima01012$coef
dlm;
dlknw;d
start()
dn;
>>>
----
ej;
dkm
??/
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
sarima01012$coef
sim_sarima <- function(n, p, q, I, P, Q, pv, qv, Pv, Qv, c, model){
mu <- mean(model$residuals)
sd <- sd(model$residuals)
res <- rnorm(n, mean = mu, sd = sd)
sim <- rep(0, n)
sim[1] <- 1
}
#--------------
#overall data visualization <- still need to fix the x-axis to time
plot(DFTP, FTP[,1], type = "l")
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
#--functions writing here-----
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(-a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(-a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
w
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(-a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(-a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
vasi_forecast <-  function(par, n){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
+}
w
