l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na] <- 0
sQ[is.na] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(SP)
+ sum(SQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
delta <- sum(pv * dif[(l) : (l - p + 1)]) + sum(qv * res_0[(l) : (l - q + 1)]) + c + sum(Pv * dif[(l - s + 1) : (l - s - P + 2)])
+ sum(Qv * resa[(l - s + 1) : (l - s - Q + 2)])
print(pv)
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
delta <- sum(pv * dif[(l + i) : (l + i- p + 1)]) + sum(qv * res_0[(l + i) : (l + i- q + 1)]) + c + sum(Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)])
+ sum(Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)])
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
sim_sarima(10, 0, 1, 0, 0, 0, 0, 0.944677079, 0, 0, 0, -0.001276227, ARI)
sim_sarima <- function(n, p, q, I, P, Q, pv, qv, Pv, Qv, s, c, model){
res_0 <- model$residuals
mu <- mean(res_0)
sd <- sd(res_0)
res <- rnorm(n, mean = mu, sd = sd)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(SP) + sum(SQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
delta <- sum(pv * dif[(l) : (l - p + 1)]) + sum(qv * res_0[(l) : (l - q + 1)]) + c + sum(Pv * dif[(l - s + 1) : (l - s - P + 2)])
+ sum(Qv * resa[(l - s + 1) : (l - s - Q + 2)])
print(pv)
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
delta <- sum(pv * dif[(l + i) : (l + i- p + 1)]) + sum(qv * res_0[(l + i) : (l + i- q + 1)]) + c + sum(Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)])
+ sum(Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)])
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
sim_sarima(10, 0, 1, 0, 0, 0, 0, 0.944677079, 0, 0, 0, -0.001276227, ARI)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(sP) + sum(sQ)
}
return(sim[(l + 1) : (l + n)])
}
sim_sarima <- function(n, p, q, I, P, Q, pv, qv, Pv, Qv, s, c, model){
res_0 <- model$residuals
mu <- mean(res_0)
sd <- sd(res_0)
res <- rnorm(n, mean = mu, sd = sd)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(sP) + sum(sQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
delta <- sum(pv * dif[(l) : (l - p + 1)]) + sum(qv * res_0[(l) : (l - q + 1)]) + c + sum(Pv * dif[(l - s + 1) : (l - s - P + 2)])
+ sum(Qv * resa[(l - s + 1) : (l - s - Q + 2)])
print(pv)
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
delta <- sum(pv * dif[(l + i) : (l + i- p + 1)]) + sum(qv * res_0[(l + i) : (l + i- q + 1)]) + c + sum(Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)])
+ sum(Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)])
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
sim_sarima(10, 0, 1, 0, 0, 0, 0, 0.944677079, 0, 0, 0, -0.001276227, ARI)
sim_sarima <- function(n, p, q, I, P, Q, pv, qv, Pv, Qv, s, c, model){
res_0 <- model$residuals
mu <- mean(res_0)
sd <- sd(res_0)
res <- rnorm(n, mean = mu, sd = sd)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(qv * sim[(i - 1) : (i - q)]) + c + sum(sP) + sum(sQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
delta <- sum(pv * dif[(l) : (l - p + 1)]) + sum(qv * res_0[(l) : (l - q + 1)]) + c + sum(Pv * dif[(l - s + 1) : (l - s - P + 2)])
+ sum(Qv * resa[(l - s + 1) : (l - s - Q + 2)])
print(pv)
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
delta <- sum(pv * dif[(l + i) : (l + i- p + 1)]) + sum(qv * res_0[(l + i) : (l + i- q + 1)]) + c + sum(Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)])
+ sum(Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)])
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
sim_sarima(10, 0, 1, 0, 0, 0, 0, 0.944677079, 0, 0, 0, -0.001276227, ARI)
sim_sarima <- function(n, p, I, q, P, Q, s, pv, qv, Pv, Qv, c, model){
res_0 <- model$residuals
mu <- mean(res_0)
sd <- sd(res_0)
res <- rnorm(n, mean = mu, sd = sd)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(qv * sim[(i - 1) : (i - q)]) + c + sum(sP) + sum(sQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
delta <- sum(pv * dif[(l) : (l - p + 1)]) + sum(qv * res_0[(l) : (l - q + 1)]) + c + sum(Pv * dif[(l - s + 1) : (l - s - P + 2)])
+ sum(Qv * resa[(l - s + 1) : (l - s - Q + 2)])
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
delta <- sum(pv * dif[(l + i) : (l + i- p + 1)]) + sum(qv * res_0[(l + i) : (l + i- q + 1)]) + c + sum(Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)])
+ sum(Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)])
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
sim_sarima(10, 1, 0, 0, 0, 0, 0, 0.944677079, 0, 0, 0, -0.001276227, ARI)
sim_sarima <- function(n, p, I, q, P, Q, s, pv, qv, Pv, Qv, c, model){
res_0 <- model$residuals
mu <- mean(res_0)
sd <- sd(res_0)
res <- rnorm(n, mean = mu, sd = sd)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(qv * sim[(i - 1) : (i - q)]) + c + sum(sP) + sum(sQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
sp <- pv * dif[(l) : (l - p + 1)]
sq <- qv * res_0[(l) : (l - q + 1)]
sP <- Pv * dif[(l - s + 1) : (l - s - P + 2)]
sQ <- Qv * resa[(l - s + 1) : (l - s - Q + 2)]
sp[is.na(sp)] <- 0
sq[is.na(sq)] <- 0
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
delta <- sum(sp) + sum(sq) + c + sum(sP) + sum(sQ)
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
sp <- pv * dif[(l + i) : (l + i- p + 1)]
sq <- qv * res_0[(l + i) : (l + i- q + 1)]
sP <- Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)]
sQ <- Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)]
sp[is.na(sp)] <- 0
sq[is.na(sq)] <- 0
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
delta <- sum(sp) + sum(sq) + c + sum(sP) + sum(sQ)
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
sim_sarima(10, 1, 0, 0, 0, 0, 0, 0.944677079, 0, 0, 0, -0.001276227, ARI)
AR111 <- Arima(ftp_2y, order = c(1, 1, 1), include.mean = T, method = "CSS")
AR111$coef
sim_sarima(10, 1, 1, 1, 0, 0, 0, 0.03246795, 0.03224221, 0, 0, 0, ARI)
vasi_ml(train_ftp)
vasi_forecast(vasi_ml(train_ftp), 29)
vasi_forecast <-  function(par, n, lastdata){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- ftp_2y_ts[length(ftp_2y_ts)] * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
vasi_forecast <-  function(par, n, lastdata){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- lastdata * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
vasi_forecast(vasi_ml(train_ftp), 29, train_ftp[length(train_ftp)])
rmse_vasi_paper <- rmse(va, expected_forecast)
rmse_vasi_paper <- rmse(va, expected_forecast)
va <- vasi_forecast(vasi_ml(train_ftp), 29, train_ftp[length(train_ftp)])
plot(ftp_2y[(train + 2): length(ftp_2y)], type = "l")
plot(expected_forecast)
rmse_vasi_paper <- rmse(va, expected_forecast)
vasi_ml(train_ftp)
a_vasi <- -12 * log (((n - 1) * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/((n - 1) * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / (n * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / ((n - 1) * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
vasi_ml(train_ftp)
c(a_vasi, lr_mu_vasi, var_vasi)
a_vasi <- -12 * log (((n - 1) * sum(ftp_2y[1: (n - 1)] * ftp_2y[2 : n]) - sum(ftp_2y[2 : n]) * sum(ftp_2y[ 1: (n - 1)]))/((n - 1) * sum(ftp_2y[1 : (n - 1)]^2) - sum(ftp_2y[1 : (n - 1)])^2))
lr_mu_vasi <- 1 / ((n- 1) * (1 - exp(-a_vasi / 12))) * (sum(ftp_2y[2 : n]) - exp(a_vasi / 12) * sum(ftp_2y[1 : (n - 1)]))
var_vasi <- 2 * a_vasi / ((n - 1) * (1 - exp(-a_vasi / 6))) * sum((ftp_2y[2 : n] - ftp_2y[1 : (n -1)] * exp(-a_vasi/12) - lr_mu_vasi * (1 - exp(-a_vasi/12)))^2)
vasi_ml(train_ftp)
c(a_vasi, lr_mu_vasi, var_vasi)
vasi_forecast <-  function(par, n, lastdata){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- lastdata * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(a / 12) + r * (1 - exp(-a / 12))
}
return(sim)
}
vasi_ml(train_ftp)
c(a_vasi, lr_mu_vasi, var_vasi)
#--functions writing here-----
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(-a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
#--functions writing here-----
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum(x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2
return(c(a, r, v))
}
vasi_ml(train_ftp)
c(a_vasi, lr_mu_vasi, var_vasi)
#--functions writing here-----
vasi_ml <- function(x){
n <- length(x) - 1
x_n_1 <- x[1 : n]
x_n_2 <- x[2 : (n + 1)]
a <- -12 * log((n * sum(x_n_1 * x_n_2) - sum(x_n_1) * sum(x_n_2)) / (n * sum(x_n_1 * x_n_1) - sum(x_n_1)^2))
r <- 1 / (n * (1 - exp(-a / 12))) * (sum(x_n_2) - exp(a / 12) * sum(x_n_1))
v <- 2*a / (n * (1 - exp(-a / 6))) * sum((x_n_2 - x_n_1 * exp(-a / 12) - r * (1 - exp(-a / 12)))^2)
return(c(a, r, v))
}
vasi_ml(train_ftp)
c(a_vasi, lr_mu_vasi, var_vasi)
va <- vasi_forecast(vasi_ml(train_ftp), 29, train_ftp[length(train_ftp)])
rmse_vasi_paper <- rmse(va, expected_forecast)
rmse_vasi_paper <- rmse(test_ftp, va)
rmse_vasi_paper <- rmse(test_ftp, expected_forecast)
rmse_vasi_paper <- rmse(test_ftp, expected_forecast)
train
n
length(train_ftp)
va <- vasi_forecast(vasi_ml(train_ftp), test, train_ftp[length(train_ftp)])
vasi_ml(train_ftp)
rmse_vasi_paper <- rmse(test_ftp, va)
n
va
expected_forecast
train_ftp
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi / 12) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi / 12) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
rmse_vasi_paper <- rmse(test_ftp, expected_forecast)
expected_forecast
va <- vasi_forecast(vasi_ml(train_ftp), test, train_ftp[length(train_ftp)])
va
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi / 12) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
rmse_vasi_paper <- rmse(test_ftp, expected_forecast)
rmse_vasi_paper <- rmse(test_ftp, expected_forecast)
expected_forecast
va
vasi_ml(train_ftp)
c(a_vasi, lr_mu_vasi, var_vasi)
print(vasi_ml(train_ftp)==c(a_vasi, lr_mu_vasi, var_vasi))
vasi_forecast <-  function(par, n, lastdata){
a <- par[1]
r <- par[2]
v <- par[3]
sim <- rep(0, n)
sim[1] <- lastdata * exp(-a / 12) + r * (1 - exp(-a / 12))
for(i in 2 : n){
sim[i] <- sim[(i - 1)] * exp(-a / 12) + r * (1 - exp(-a / 12))
print(sim[i] == expected_forecast[i])
}
return(sim)
}
sim_sarima <- function(n, p, I, q, P, Q, s, pv, qv, Pv, Qv, c, model){
res_0 <- model$residuals
mu <- mean(res_0)
sd <- sd(res_0)
res <- rnorm(n, mean = mu, sd = sd)
if (I == 0){
resa <- c(res_0, res)
sim <- c(ftp_2y_ts, rep(0, n))
l <- length(ftp_2y_ts)
for(i in (l + 1) : (l + n)){
sP <- Pv * sim[(i - s) : (i - s - P + 1)]
sQ <- Qv * resa[(i - s) : (i - s - Q + 1)]
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
sim[i] <- sum(pv * sim[(i - 1) : (i - p)]) + sum(qv * sim[(i - 1) : (i - q)]) + c + sum(sP) + sum(sQ)
}
return(sim[(l + 1) : (l + n)])
}
else{
dif <- diff(ftp_2y, lag = I)
l <- length(dif)
sim <- rep(0, n)
resa <- c(res_0, res)
sp <- pv * dif[(l) : (l - p + 1)]
sq <- qv * res_0[(l) : (l - q + 1)]
sP <- Pv * dif[(l - s + 1) : (l - s - P + 2)]
sQ <- Qv * resa[(l - s + 1) : (l - s - Q + 2)]
sp[is.na(sp)] <- 0
sq[is.na(sq)] <- 0
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
delta <- sum(sp) + sum(sq) + c + sum(sP) + sum(sQ)
sim [1] <- ftp_2y[length(ftp_2y)] + delta
dif <- c(dif, delta)
for(i in 2 : n){
sp <- pv * dif[(l + i) : (l + i- p + 1)]
sq <- qv * res_0[(l + i) : (l + i- q + 1)]
sP <- Pv * dif[(l + i - s + 1) : (l + i - s - P + 2)]
sQ <- Qv * resa[(l + i - s + 1) : (l + i - s - Q + 2)]
sp[is.na(sp)] <- 0
sq[is.na(sq)] <- 0
sP[is.na(sP)] <- 0
sQ[is.na(sQ)] <- 0
delta <- sum(sp) + sum(sq) + c + sum(sP) + sum(sQ)
sim [i] <- sim[(i - 1)] + delta
dif <- c(dif, delta)
}
return(sim)
}
}
va <- vasi_forecast(vasi_ml(train_ftp), test, train_ftp[length(train_ftp)])
rmse_vasi_paper <- rmse(test_ftp, va)
rmse_vasi_paper <- rmse(test_ftp, va)
rmse_vasi_paper <- rmse(test_ftp, va)
expected_forecast <- rep(0 , test)
expected_forecast [1] <- ftp_2y[(train + 1)] * exp(-a_vasi / 12) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
for(i in 2 : test){
expected_forecast[i] <- expected_forecast[(i - 1)] * exp(-a_vasi / 12) + lr_mu_vasi * (1 - exp(-a_vasi / 12))
}
va <- vasi_forecast(vasi_ml(train_ftp), test, train_ftp[length(train_ftp)])
#------ simulation for different model: # only generate n value tho
#1. SARIMA(1, 0, 0)(0, 0, 1)[4]; 2. GARCH(1, 1); 3. AR(1); 4. ARIMA(0, 1, 1) 5. RW; 6. Vasicek
ftp_forecast <- function(n, type){
if(type == 1){
sample_sarima <- arima(ftp_2y_ts, order = c(1, 0, 0), seasonal = c(0,0,1,4), method = "ML")
sim_1 <- forecast(sample_sarima, h = n)
return(sim_1$mean)
}
else if(type == 2){
spec1 <- ugarchspec(variance.model = list(model = "sGARCH", garchOrder = c(1, 1)))
fit1 <- ugarchfit(spec1, data = ftp_2y_ts)
sim_2 <- ugarchforecast(fit1, n.ahead = n)
return(fitted(sim_2))
}
else if(type == 3){
sample_sarima <- arima(ftp_2y_ts, order = c(1, 0, 0), method = "ML")
sim_1 <- forecast(sample_sarima, h = n)
return(sim_1$mean)
}
else if(type == 4){
sample_sarima <- arima(ftp_2y_ts, order = c(0, 1, 1), method = "ML")
sim_1 <- forecast(sample_sarima, h = n)
return(sim_1$mean)
}
else if(type == 5){
res <- rnorm(n, mean = mean(dif_2y), sd = sd(dif_2y))
sim <- rep(0, n)
sim[1] <- res[1] + ftp_2y_ts[length(ftp_2y_ts)]
for(i in 2 : n){
sim[i] <- res[i] + sim[(i - 1)]
}
return(sim)
}
else if (type == 6){
sim <- vasi_forecast(vasi_ml(ftp_2y), n, ftp_2y[length(ftp_2y)])
return(sim)
}
}
#--- empirical cdf of ftp
rank(ftp_2y)
#--- empirical cdf of ftp
rank(ftp_2y)/ (length(ftp_2y) + 1)
plot(ftp_2y)
View(ER)
emp_eur <- rank(ER[1])/ (length(ER[1]) + 1)
#--- empirical cdf of ftp
emp_ftp <- rank(ftp_2y)/ (length(ftp_2y) + 1)
emp_UU <- c(emp_ftp, emp_eur)
plot(emp_ftp, emp_eur)
plot(emp_ftp, emp_eur, type= "d")
plot(emp_ftp, emp_eur, pch = 16, col = "blue")
emp_eur <- rank(ER[1])/ (length(ER[1]) + 1)
emp_eur
emp_eur <- rank(ER[, 1])/ (length(ER[, 1]) + 1)
emp_eur
plot(emp_ftp, emp_eur, pch = 16, col = "blue")
plot(emp_ftp, emp_eur, pch = 16, col = "blue")
emp_eur
install.packages("copulas")
install.packages("copula")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
library(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
